<operation>
	<services>

		<service name="OracleDB"
				 adminPort="1521"
				 connectionPattern="jdbc:oracle:thin:@${target.address}:${target.port}:${target.prop.sid}"
				 usernameRegEx="^[A-Za-z]+?[A-Za-z0-9. #_]*?$">  <!--in 12C Multi-tenant, the user in CDB has # character-->

			<properties>
				<property name="sid" required="true"/>
				<property name="pumpDbDir" required="true"/>
				<property name="driver" value="oracle.jdbc.driver.OracleDriver"/>
			</properties>

			<validations>
				<validation name="OraId" regex="^[a-zA-Z]+?[\w_]*$"/>
				<validation name="OraIdList" regex="^[a-zA-Z]+?[\w_]*?(,[ ]*?[a-zA-Z]+?[\w_]*?)*?$"/>
				<validation name="OraPass" regex="[^@'&quot;]+"/>
			</validations>

			<commands>

				<command name="listUser" viewMode="List">
					<params>
						<param name="Username" validRef="OraId"/>
						<param name="AccountStatus" stringLiterals="OPEN|LOCKED|EXPIRED &amp; LOCKED"/>
					</params>

					<body><![CDATA[
def map = $input('Username', 'AccountStatus > account_status')

db {
	prompt "Show ${map.isEmpty() ? 'All' : 'Filtered'} Users"
	query """
		select
			us.user_id,
			us.username,
			us.account_status,
			us.lock_date,
			us.default_tablespace,
			us.created,
			tbl.table_count
		from
			dba_users us
			left join (
				select
					owner,
					count(1) table_count
				from dba_tables
				group by owner) tbl on tbl.owner = us.username
		where
			1=1
			%FILTER%
		order by us.username"""
	filters map
}

]]></body>
				</command>

				<command name="createUser">
					<params>
						<param name="Username" required="true" validRef="OraId"/>
						<param name="Password" validRef="OraPass"/>
						<param name="ResourceRole" type="Boolean" required="true" defaultValue="true"/>
						<param name="UnlimitedTBS" type="Boolean" required="true" defaultValue="false"/>
						<param name="DBARole" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
if(checkUser([Username: Username]))
	$error('User already exists')

def pass = Username
if($param('Password'))
	pass = Password

db {
	prompt "Create User: '${Username}'"
	query """ create user ${Username} identified by "${pass}" """
}

db {
	prompt "Grant Connect: '${Username}'"
	query "grant connect to ${Username}"
}

grantUser([Username: Username, ResourceRole: ResourceRole, UnlimitedTBS: UnlimitedTBS, DBARole: DBARole])
]]></body>
				</command>

				<command name="grantUser">
					<params>
						<param name="Username" required="true" validRef="OraId"/>
						<param name="ResourceRole" type="Boolean" required="true" defaultValue="true"/>
						<param name="UnlimitedTBS" type="Boolean" required="true" defaultValue="false"/>
						<param name="DBARole" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
if(ResourceRole)
	db {
		prompt "Grant Resource Role: '${Username}'"
		query "grant resource to ${Username}"
	}

if(UnlimitedTBS)
	db {
		prompt "Grant Unlimited Tablespace: '${Username}'"
		query "grant unlimited tablespace to ${Username}"
	}

if(DBARole)
	db {
		prompt "Grant DBA Role: '${Username}'"
		query "grant dba to ${Username}"
	}
]]></body>
				</command>

				<command name="changePassword" confirm="true">
					<params>
						<param name="Username" required="true" validRef="OraId"/>
						<param name="NewPassword" required="true" validRef="OraPass"/>
					</params>

					<body><![CDATA[
db {
	prompt "Change Password for '${Username}'"
	query """ alter user ${Username} identified by "${NewPassword}" account unlock """
}
$userPasswordUpdated(Username, NewPassword)
]]></body>
				</command>

				<command name="checkUser">
					<params>
						<param name="Username" required="true" validRef="OraId"/>
					</params>

					<body>
						<![CDATA[
db {
	prompt "Check User '${Username}'"
	query "select count(1) from all_users where username = upper('${Username}')"
	result {
		it.singleCell > 0
	}
}
]]></body>
				</command>

				<command name="findOsDir">
					<params/>

					<body><![CDATA[
if(!target.prop.pumpDbDir)
	$error('No target.prop.pumpDbDir value!')

db {
	prompt 'Find OS-Directory of DB-Directory'
	query "select directory_path from all_directories where directory_name='${target.prop.pumpDbDir.toUpperCase()}'"
	result {
		it.singleCell
	}
}
]]></body>
				</command>

				<command name="listDump">
					<params>
						<param name="Name"/>
					</params>

					<body><![CDATA[
def osDir = findOsDir()

if(!osDir)
	$error('OS directory not found!')

def fileName = '*'
if($param('Name'))
	fileName = "*${Name}*"

ssh {
	prompt 'List Dump Files'
	cmd """ find ${osDir} -maxdepth 1 -iname "${fileName}.dmp" -printf "%TY-%Tm-%Td %TH:%TM|%f|%k KB\n" | sort -r """
	result {
		it.toTabular("[|]")
		  .prepend("Time|DumpFile|Size\n")
	}
}
]]></body>
				</command>

				<command name="backupSchema">
					<params>
						<param name="Schemas" required="true" validRef="OraIdList"/>
						<param name="Content" stringLiterals="ALL|DATA_ONLY|METADATA_ONLY" defaultValue="ALL"
							   required="true"/>
						<param name="Force" type="Boolean" required="true" defaultValue="false" adminOnly="true"/>
					</params>

					<body><![CDATA[
if(Schemas == '*') {
	def file = "exp.${target.name4file}.full.${$now()}"

	ssh {
		prompt "Create Full Export as '${file}.dmp'"
		cmd "su - oracle -c 'expdp ${target.username}/${target.password}@${target.prop.sid} full=y directory=${target.prop.pumpDbDir} dumpfile=${file}.dmp logfile=${file}.log content=${Content} compression=ALL compression_algorithm=MEDIUM'"
	}
	return file

} else {
	def availSchema = ''

	Schemas.split(',').each {
		def username = it.trim()

		if(checkUser([Username: username])) {
			availSchema += ",${username}"
		} else if(!Force) {
			$error("Schema '${username}' does not exist!")
		}
	}

	if(availSchema.length() > 1) {
		availSchema = availSchema.substring(1)
		def file = "exp.${target.name4file}.${availSchema.replace(',', '.')}.${$now()}"

		ssh {
			prompt "Create Export from '${availSchema}' as '${file}.dmp'"
			cmd "su - oracle -c 'expdp ${target.username}/${target.password}@${target.prop.sid} schemas=${availSchema} directory=${target.prop.pumpDbDir} dumpfile=${file}.dmp logfile=${file}.log content=${Content}'"
		}
		return file
	}
}
]]></body>
				</command>

				<command name="restoreSchema" confirm="true">
					<params>
						<param name="DumpFile" required="true"/>
						<param name="SourceSchemas" required="true" validRef="OraIdList"/>
						<param name="DestSchemas" validRef="OraIdList"/>
						<param name="Content" stringLiterals="ALL|DATA_ONLY|METADATA_ONLY" defaultValue="ALL"
							   required="true"/>
						<param name="DoBackUp" type="Boolean" required="true" defaultValue="true"/>
						<param name="IgnoreTrigger" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
def users = $param('DestSchemas') ? DestSchemas : SourceSchemas

if(Content != 'DATA_ONLY')
	dropUser([Usernames: users, DoBackup: DoBackUp, DoKillSession: true])

if(DumpFile.endsWith('.dmp'))
	DumpFile = DumpFile.substring(0, DumpFile.length() - 4)

def genParams = "directory=${target.prop.pumpDbDir} dumpfile=${DumpFile}.dmp logfile=imp.${DumpFile}.log transform=OID:n content=${Content}"
if(IgnoreTrigger)
	genParams += " exclude=trigger"

if($param('DestSchemas')) {
	def remap = generateRemap([SourceSchemas: SourceSchemas, DestSchemas: DestSchemas])
	ssh {
		prompt "Restoring '${remap}' from '${DumpFile}'"
		cmd "su - oracle -c 'impdp ${target.username}/${target.password}@${target.prop.sid} remap_schema=${remap} ${genParams}'"
		force true
	}

	DestSchemas.split(',').each {
		def username = it.trim()
		changePassword([Username: username, NewPassword: username.toLowerCase()])
	}
} else {
	ssh {
		prompt "Restoring '${SourceSchemas}' from '${DumpFile}'"
		cmd "su - oracle -c 'impdp ${target.username}/${target.password}@${target.prop.sid} schemas=${SourceSchemas} ${genParams}'"
		force true
	}
}
]]></body>
				</command>

				<command name="killUserSession" confirm="true">
					<params>
						<param name="Usernames" required="true" validRef="OraIdList"/>
					</params>

					<body><![CDATA[
Usernames.split(',').each {
	def username = it.trim()

	db {
		prompt "Kill All Sessions for User: '${username}'"
		query """
			declare
				v_schema varchar2(128);
			begin
				v_schema := '${username.toUpperCase()}';
				if v_schema in ('SYS','DBSNMP','SYSMAN', 'SYSTEM') then
					raise_application_error(-20001, 'Session belongs to illegal user. You can not kill ${username}!');
				end if;

				for i in (select sid, serial# from v\$session where username = v_schema)
				loop
					execute immediate 'alter system kill session '''|| i.sid || ',' || i.serial# || ''' immediate';
				end loop;
			end; """
	}
}
]]></body>
				</command>

				<command name="dropUser" confirm="true">
					<params>
						<param name="Usernames" required="true" validRef="OraIdList"/>
						<param name="DoBackup" type="Boolean" defaultValue="true" required="true"/>
						<param name="DoKillSession" type="Boolean" defaultValue="false" required="true"/>
					</params>

					<body><![CDATA[
if(DoBackup)
	backupSchema([Schemas: Usernames, Force: true])

Usernames.split(',').each {
	def username = it.trim()

	if(checkUser([Username: username])) {
		if(DoKillSession)
			killUserSession([Usernames: username])

		$sleep(10000)

		db {
			prompt "Drop User '${username}'"
			query "drop user ${username} cascade"
		}
	}
}
]]></body>
				</command>

				<command name="copySchema" confirm="true">
					<params>
						<param name="SourceSchemas" required="true" validRef="OraIdList"/>
						<param name="DestSchemas" validRef="OraIdList"/>
						<param name="DestServer" type="Service" required="true"/>
						<param name="SrcTablespaces" validRef="OraIdList"/>
						<param name="DstTablespaces" validRef="OraIdList"/>
						<param name="Content" stringLiterals="ALL|DATA_ONLY|METADATA_ONLY" defaultValue="ALL"
							   required="true"/>
						<param name="DoBackUpDest" type="Boolean" required="true" defaultValue="true"/>
						<param name="TriggerCorrection" type="Boolean" required="false" defaultValue="false"/>
						<param name="DoParallel" type="Boolean" required="true" defaultValue="true"/>
					</params>

					<body><![CDATA[
if(target == DestServer && !$param('DestSchemas'))
	$error('Source server & destination are the same: DestSchemas Required!')

if(target == DestServer && SourceSchemas == $param('DestSchemas'))
	$error('Source server & destination are the same: SourceSchemas & DestSchemas must be Different')

SourceSchemas.split(',').each {
	def username = it.trim()

	if(!checkUser([Username: username])) {
		$error("Schema '${username}' does not exist!")
	}
}

def srcServer = target
def dbLinkName = "dbl${srcServer.id}_${DestServer.id}_${$now()}"

def dest = SourceSchemas
if($param('DestSchemas'))
	dest = DestSchemas

$reTarget(DestServer, {

	db {
		prompt "Create Database Link on Dest: ${dbLinkName}"
		query """
			create database link ${dbLinkName}
			connect to ${srcServer.username} identified by "${srcServer.password}"
			using '
			(DESCRIPTION=
				(ADDRESS=
					(PROTOCOL=TCP)
					(HOST=${srcServer.address})
					(PORT=${srcServer.port})
				)
				(CONNECT_DATA=
					(SID=${srcServer.prop.sid})
				)
			)' """
	}

	def file = "net.${target.name4file}.${dest.replace(',', '.')}.${$now()}"

	def genParams = "schemas=${SourceSchemas} directory=${target.prop.pumpDbDir} network_link=${dbLinkName} logfile=${file}.log transform=OID:n content=${Content}"

	if(TriggerCorrection)
		genParams += " exclude=trigger"

	if(DoParallel) {
		def cpu = calcParallel()
		genParams += " parallel = ${cpu}"
	}

	if($param('SrcTablespaces') && $param('DstTablespaces')) {
		def remap = generateRemap([SourceSchemas: SrcTablespaces, DestSchemas: DstTablespaces, Type: 'tablespaces'])
		genParams += " remap_tablespace=${remap}"
	} else if($param('SrcTablespaces')) {
		$error("'DstTablespaces' is required!")
	} else if($param('DstTablespaces')) {
		$error("'SrcTablespaces' is required!")
	}

	if(Content != 'DATA_ONLY') {
		dropUser([Usernames: dest, DoBackup: DoBackUpDest, DoKillSession: true])
	}

	if(SourceSchemas == dest) {
		ssh {
			prompt "Import Database from: '${srcServer}', log='${file}', schemas='${SourceSchemas}'"
			cmd "su - oracle -c 'impdp ${target.username}/${target.password}@${target.prop.sid} ${genParams}'"
			force true
		}

	} else {
		def remap = generateRemap([SourceSchemas: SourceSchemas, DestSchemas: dest])

		ssh {
			prompt "Import Database from: '${srcServer}', file='${file}', remap=${remap}"
			cmd " su - oracle -c 'impdp ${target.username}/${target.password}@${target.prop.sid} remap_schema=${remap} ${genParams}' "
			force true
		}

		DestSchemas.split(',').each {
			def username = it.trim()
			changePassword([Username: username, NewPassword: username.toLowerCase()])
		}

		if(TriggerCorrection) {
			remap.split('[,]').each {
				def parts = it.split('[:]')
				def src = parts[0].toUpperCase()
				def dst = parts[1].toUpperCase()

				def expFile = "trg-${target.name4file}.${dst}.${src}.${$now()}"
				def osDir = findOsDir()
				def sqlFile = "${osDir}/${expFile}.sql"

				ssh {
					prompt "Convert Trigger Script: src=${src} dest=${dst} file=${sqlFile}"
					cmd """

echo -e "\n--- Extract Triggers Source: ${src}\n"
su - oracle -c 'impdp ${target.username}/${target.password}@${target.prop.sid} schemas=${src} directory=${target.prop.pumpDbDir} network_link=${dbLinkName} logfile=${expFile}.log include=TRIGGER sqlfile=${expFile}.sql'

echo -e "\n--- Remove Schema Name: ${src}\n"
sed -i "s/${src}.//i" ${sqlFile}

echo -e "\n--- Apply Trigger to Dest: ${sqlFile}\n"
echo -e "alter session set current_schema = ${dst};\n" > ${sqlFile}.1
cat ${sqlFile} >> ${sqlFile}.1
su - oracle -c 'sqlplus ${target.username}/${target.password}@${target.prop.sid} @${sqlFile}.1'

					"""
				}
			}
		}
	}

	db {
		prompt "Drop Database Link on Dest: '${target}' - Name=${dbLinkName}"
		query "drop database link ${dbLinkName}"
	}
})
]]></body>
				</command>

				<command name="listSession">
					<params>
						<param name="Username"/>
						<param name="OSUser"/>
						<param name="Machine"/>
						<param name="Program"/>
					</params>

					<body><![CDATA[
def map = $input('Username', 'OSUser', 'Machine', 'Program')

db {
	prompt "List ${map.isEmpty() ? 'All' : 'Filtered'} Sessions"
	query "select sid, serial# as serial, username, status, schemaname, osuser, machine, program from v\$session where 1=1 %FILTER%"
	filters map
}
]]></body>
				</command>

				<!-- PDB -->

				<command name="closePDB" confirm="true">
					<params/>

					<body><![CDATA[
def isOpen = db {
	prompt "Check whether PDB is closed"
	query  "select count(1) as cnt from v\$pdbs where open_mode = 'MOUNTED'"
	admin  true

	result {
		it.singleCell == 0
	}
}

if(isOpen)
	db {
		prompt "Close PDB"
		query  "alter pluggable database close immediate"
		admin  true
	}
else
	$warn("Already Closed!")
]]></body>
				</command>

				<command name="openPDB" confirm="true">
					<params>
						<param name="WithResetlogs" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
def sql = "alter pluggable database open"

if(WithResetlogs)
	db {
		prompt "Open PDB (with 'resetlogs')"
		query  "${sql} resetlogs"
		admin  true

		error {
			if(it.contains('ORA-39862')) { // ORA-39862: RESETLOGS option only valid after a Pluggable Database incomplete recovery
				db {
					prompt "Open PDB (without 'resetlogs')"
					query  "${sql}"
					admin true

				}
			}
		}
	}
else
	db {
		prompt "Open PDB (without 'resetlogs')"
		query  "${sql}"
		admin  true
	}
]]></body>
				</command>

				<command name="batchPDBChangePassword">
					<params/>

					<body><![CDATA[
def maps = [
	'%_APP':              'rMEMC0H06M',
	'MASTER_APP':         'LCrTtwJzVk',

	'MIDRP_APPSTORE':     'jzapxTZsjw',
	'MIDRP_KEYLEAD':      'CwteQheW3f',
	'MIDRP_NOTIFICATION': 'QMGIXtfi5c',
	'MIDRP_ASYNC':        'A2Xp68n1NJ',

	'%_ENG%':             'w0ov8qws1f',
	'MASTER_ENG':         'ne40RsX0NC'
]

def pdbs = db {
	prompt "List all PDBs"
	query ''' select pdb_name from dba_pdbs where pdb_name <> 'PDB$SEED' '''
	admin true
}

if(pdbs instanceof String) {
	pdbs = [['pdb_name': pdbs]]
} else {
	pdbs = pdbs.rows
}

pdbs.each { pdbCell ->
	def pdb = pdbCell['pdb_name']

	db {
		prompt "Alter PDB: ${pdb}"
		query "alter session set container = ${pdb}"
		admin true
	}

	maps.each { k,v ->
		def users = db {
			prompt "List schemas for PDB: pdb=${pdb} group=${k}"
			query """
				select username
				from all_users
				where
					username like '${k}' """
			admin true
		}

		if(users instanceof String) {
			users = [['username': users]]
		} else {
			users = users.rows
		}

		users.each { userCell ->
			def username = userCell['username']

			db {
				prompt "Alter user: pdb = ${pdb} user = ${username} group = ${k}"
				query """alter user ${username} identified by "${v}" """
				admin true
			}
		}
	}
}
]]></body>
				</command>

				<!--Restore Point -->

				<command name="createRestorePoint" confirm="true">
					<params/>

					<body><![CDATA[
def pointName = "${target.name4file}_${$now()}"

db {
	prompt "Create Restore Point: ${pointName}"
	query "create restore point ${pointName}"
}

return pointName
]]></body>
				</command>

				<command name="listRestorePoint">
					<params>
						<param name="Valid" type="Boolean" required="true" defaultValue="true"/>
					</params>

					<body><![CDATA[
def sql = """
select
	name restore_point_name,
	time,
	to_char(time, 'yyyy-mm-dd hh24:mi:ss', 'nls_calendar=persian') time_persian
from v\$restore_point
"""

if(Valid)
	sql = """
	${sql}
	where scn >= (select oldest_flashback_scn from v\$flashback_database_log)
	"""

db {
	prompt "List Restore Point(s) "
	query sql
	admin true
}
]]></body>
				</command>

				<command name="flashbackRestorePoint" confirm="true">
					<params>
						<param name="PointName" required="true"/>
					</params>

					<body><![CDATA[
if(!checkRestorePoint([PointName : PointName]))
	$error("Invalid Restore Point Name: '${PointName}'")

closePDB()

db {
	prompt "Flashback Restore Point: '${PointName}'"
	query  "flashback pluggable database to restore point ${PointName}"
	admin  true

	error {
		if(it.contains('ORA-38762')) { //ORA-38762: redo logs needed for SCN ? to SCN ?
			def fromSCN = it.find("ORA-38762.+?for SCN (\\d+)", 1)
			def toSCN   = it.find("ORA-38762.+?to SCN (\\d+)", 1)

			$warn("fromSCN = ${fromSCN}, toSCN = ${toSCN}")

			if(fromSCN) {

				def seq = db {
					prompt "Find Sequence for SCN=${fromSCN}"
					query  """
						select distinct sequence#
						from v\$archived_log
						where ${fromSCN} between first_change# and next_change#-1
					"""
					admin true
					result {
						it.singleCell
					}
				}

				$warn("Found Sequence: ${seq}")

				def file = "ares_${seq}_${PointName}.rman"

				ssh {
					prompt "Revert Archive Log to Sequence: ${seq}"
					cmd """
su - oracle -c '
cat > ${file} << _EOF_
connect target /
restore archivelog from sequence ${seq};
_EOF_

cat ${file}

rman cmdfile=${file}

rm -f ${file}
'
					"""
				}

				db {
					prompt "Flashback Restore Point: '${PointName}'"
					query  "flashback pluggable database to restore point ${PointName}"
					admin  true
				}
			} // if
		} // if
	} // error
}

openPDB([WithResetlogs : true])
]]></body>
				</command>

				<!--ERP -->

				<command name="erpCopySchema" confirm="true">
					<params>
						<param name="SourceSchemas" required="true" validRef="OraIdList"/>
						<param name="DestSchemas" validRef="OraIdList"/>
						<param name="DestMasterSchema"/>
						<param name="DestServer" type="Service" required="true"/>
						<param name="Content" stringLiterals="ALL|DATA_ONLY|METADATA_ONLY" defaultValue="ALL"
							   required="true"/>
						<param name="DoBackUpDest" type="Boolean" required="true" defaultValue="true"/>
						<param name="DoParallel" type="Boolean" required="true" defaultValue="true"/>
					</params>

					<body><![CDATA[
if($param("DestMasterSchema") && !DestSchemas.contains($param("DestMasterSchema")))
	$error("Invalid DestMasterSchema in DestSchemas")

copySchema([SourceSchemas: SourceSchemas, DestSchemas: DestSchemas, DestServer: DestServer, Content: Content, DoBackUpDest: DoBackUpDest, TriggerCorrection: true, DoParallel: DoParallel])

$reTarget(DestServer, {

	if($param("DestMasterSchema")) {
		def mastSchema = DestMasterSchema.toUpperCase()

		db {
			prompt "Grant for Master Objects: ${mastSchema}"
			query """
				declare
					v_usernames varchar(32000);
				begin
					select listagg(username,',') within group (order by username) into v_usernames
					from dba_users
					where regexp_like(username,'^(BISCO|FESICO|ZARAND|ZISCO|IBCCO|IBCC|SISCO|PABDANA|MIDHCO|MESCO|MANA|MIEPCO|MEMRADCO|MEMSECO|ISTCO)_MAIN.*');

					for i in (select table_name from dba_tables where owner = '${mastSchema}') loop
						execute immediate 'grant select,update,insert,delete,references on ${mastSchema}.' || i.table_name || ' to ' || v_usernames;
						dbms_output.put_line('Select on ${mastSchema}.' || i.table_name || ' granted to users');
					end loop;

					for i in (select sequence_name from dba_sequences where sequence_owner = '${mastSchema}') loop
						execute immediate 'grant select on ${mastSchema}.' || i.sequence_name || ' to ' || v_usernames;
						dbms_output.put_line('Select on ${mastSchema}.' || i.sequence_name || ' granted to users');
					end loop;

					exception when others then
						raise_application_error(-20001, 'An error was encountered - ' || sqlcode || ' -ERROR- ' || sqlerrm);

				end;
			"""
		}
	}
})
]]></body>
				</command>

				<!-- Hidden -->

				<command name="generateRemap" viewMode="Hidden">
					<params>
						<param name="SourceSchemas" required="true"/>
						<param name="DestSchemas" required="true"/>
						<param name="Type" required="true" defaultValue="schemas"/>
					</params>

					<body><![CDATA[
def srcArr = SourceSchemas.split(',')
def dstArr = DestSchemas.split(',')

if(srcArr.length != dstArr.length)
	$error('Unequal number of ${Type} in source and destination')
else {
	def remap = "${srcArr[0].trim()}:${dstArr[0].trim()}"
	for(def i=1; i < srcArr.length; i++) {
		def srcSchema = srcArr[i].trim()
		def dstSchema = dstArr[i].trim()
		if(srcSchema.length() > 0 && dstSchema.length() > 0) {
			remap += ",${srcSchema}:${dstSchema}"
		}
	}
	return remap
}
]]></body>
				</command>

				<command name="calcParallel" viewMode="Hidden">
					<params/>

					<body><![CDATA[
def cnt = countCore()
return Math.round(Math.ceil(cnt / 4))
]]></body>
				</command>

				<command name="checkRestorePoint" viewMode="Hidden">
					<params>
						<param name="PointName" required="true"/>
					</params>

					<body><![CDATA[
db {
	prompt "Check Restore Point: '${PointName}'"
	query  "select count(1) from v\$restore_point where name = '${PointName.toUpperCase()}'"
	admin  true

	result {
		it.singleCell > 0
	}
}
]]></body>
				</command>

				<!--
								<command name="truncateSchema">
									<params>
										<param name="Schema" required="true"/>
									</params>

									<body><![CDATA[
				db {
					prompt "Truncate Tables/Sequences/Synonyms for '${Schema}'"
					query """
						declare
							v_schema varchar2(20);
						begin
							v_schema := '${Schema.toUpperCase()}';

							- -Bye Sequences!
							for i in (select us.sequence_name from all_sequences us where us.sequence_owner = v_schema) loop
								execute immediate 'drop sequence '||v_schema||'.'|| i.sequence_name;
							end loop;

							- -Bye Synonyms!
							for i in (select us.synonym_name from all_synonyms us where us.owner = v_schema) loop
								execute immediate 'drop synonym '||v_schema||'.'|| i.synonym_name;
							end loop;

							- -Bye Tables!
							for i in (select ut.table_name from all_tables ut where ut.owner = v_schema) loop
								execute immediate 'drop table '||v_schema||'.'|| i.table_name ||' cascade constraints purge';
							end loop;
						end;"""
				}
				]]></body>
								</command>
				-->
			</commands>

		</service>

	</services>
</operation>
