<operation>
	<services>

		<service name="OracleDB"
				 adminPort="1521"
				 connectionPattern="jdbc:oracle:thin:@${target.address}:${target.port}:${target.prop.sid}">

			<properties>
				<property name="sid" required="true"/>
				<property name="pumpDbDir" required="true"/>
				<property name="driver" value="oracle.jdbc.driver.OracleDriver"/>
			</properties>

			<commands>

				<command name="listUser" listView="true">
					<params>
						<param name="Username"/>
						<param name="AccountStatus"/>
					</params>

					<body><![CDATA[
def map = $inputs('Username|username', 'AccountStatus|account_status')

db {
	prompt "Show ${map.empty ? 'All':'Filtered'} Users"
	query """
		select
			us.user_id,
			us.username,
			us.account_status,
			us.lock_date,
			us.default_tablespace,
			us.created,
			tbl.table_count
		from
			dba_users us
			left join (
				select
					owner,
					count(1) table_count
				from dba_tables
				group by owner) tbl on tbl.owner = us.username
		where
			1=1
			%FILTER%
		order by us.username"""
	filters map
}

]]></body>
				</command>

				<command name="createUser">
					<params>
						<param name="Username" required="true"/>
						<param name="Password" required="true"/>
						<param name="ResourceRole" type="Boolean" required="true" defaultValue="true"/>
						<param name="UnlimitedTBS" type="Boolean" required="true" defaultValue="false"/>
						<param name="DBARole" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
db {
	prompt "Create User: '${Username}'"
	query """ create user ${Username} identified by "${Password}" """
}

db {
	prompt "Grant Connect: '${Username}'"
	query "grant connect to ${Username}"
}

grant([Username: Username, ResourceRole: ResourceRole, UnlimitedTBS: UnlimitedTBS, DBARole: DBARole])
]]></body>
				</command>

				<command name="grant">
					<params>
						<param name="Username" required="true"/>
						<param name="ResourceRole" type="Boolean" required="true" defaultValue="true"/>
						<param name="UnlimitedTBS" type="Boolean" required="true" defaultValue="false"/>
						<param name="DBARole" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
if(ResourceRole) {
	db {
		prompt "Grant Resource Role: '${Username}'"
		query "grant resource to ${Username}"
	}
}

if(UnlimitedTBS) {
	db {
		prompt "Grant Unlimited Tablespace: '${Username}'"
		query "grant unlimited tablespace to ${Username}"
	}
}

if(DBARole) {
	db {
		prompt "Grant DBA Role: '${Username}'"
		query "grant dba to ${Username}"
	}
}
]]></body>
				</command>

				<command name="changePassword">
					<params>
						<param name="Username" required="true"/>
						<param name="NewPassword" required="true"/>
					</params>

					<body><![CDATA[
db {
	prompt "Change Password for '${Username}'"
	query """ alter user ${Username} identified by "${NewPassword}" account unlock """
}
$userPasswordUpdated(Username, NewPassword)
]]></body>
				</command>

				<command name="checkUser">
					<params>
						<param name="Username" required="true"/>
					</params>

					<body>
						<![CDATA[
db {
	prompt "Check User '${Username}'"
	query "select count(1) from all_users where username = upper('${Username}')"
	result {
		it > 0
	}
}
]]></body>
				</command>

				<command name="backupSchema">
					<params>
						<param name="Schema" required="true"/>
					</params>
					<body>
						<![CDATA[
if(!checkUser([Username: Schema]))
	$error("Schema '${schema}' does not exist!")

def file = "${Schema}_bkUp_${$now()}"
ssh {
	prompt "Create Backup from '${Schema}' as '${file}'"
	cmd "su - oracle -c 'expdp ${target.username}/${target.password} schemas=${Schema} directory=${target.prop.pumpDbDir} dumpfile=${file}.dmp logfile=${file}.log'"
}
]]></body>
				</command>

				<command name="truncateSchema">
					<params>
						<param name="Schema" required="true"/>
					</params>

					<body>
						<![CDATA[
db {
	prompt "Truncate Tables/Sequences/Synonyms for '${Schema}'"
	query """
		declare
			v_schema varchar2(20);
		begin
			v_schema := '${Schema.toUpperCase()}';

			--Bye Sequences!
			for i in (select us.sequence_name from all_sequences us where us.sequence_owner = v_schema) loop
				execute immediate 'drop sequence '||v_schema||'.'|| i.sequence_name;
			end loop;

			--Bye Synonyms!
			for i in (select us.synonym_name from all_synonyms us where us.owner = v_schema) loop
				execute immediate 'drop synonym '||v_schema||'.'|| i.synonym_name;
			end loop;

			--Bye Tables!
			for i in (select ut.table_name from all_tables ut where ut.owner = v_schema) loop
				execute immediate 'drop table '||v_schema||'.'|| i.table_name ||' cascade constraints purge';
			end loop;
		end;"""
}
]]></body>
				</command>

				<command name="copySchema">
					<params>
						<param name="SourceSchema" required="true"/>
						<param name="DestSchema" required="true"/>
						<param name="DestServer" type="Service"/>
						<param name="DoBackUpDest" type="Boolean" defaultValue="true"/>
					</params>

					<body><![CDATA[
if($param('DestServer'))
	copyRemoteSchema([SourceSchema: SourceSchema, DestSchema: DestSchema, DestServer: DestServer, DoBackUpDest: DoBackUpDest])
else
	copyLocalSchema([SourceSchema: SourceSchema, DestSchema: DestSchema, DoBackUpDest: DoBackUpDest])
]]></body>
				</command>

				<command name="copyLocalSchema">
					<params>
						<param name="SourceSchema" required="true"/>
						<param name="DestSchema" required="true"/>
						<param name="DoBackUpDest" type="Boolean" defaultValue="true"/>
					</params>

					<body>
						<![CDATA[
if(!checkUser([Username: SourceSchema]))
	$error("Schema '${SourceSchema}' does not exist!")

if(DoBackUpDest)
	backupSchema([Schema: DestSchema])

truncateSchema([Schema: DestSchema])

ssh {
	prompt "Export Dump from '${SourceSchema}'"
	cmd "su - oracle -c 'expdp ${target.username}/${target.password} schemas=${SourceSchema} directory=${target.prop.pumpDbDir} dumpfile=${SourceSchema}.dmp logfile=${SourceSchema}.log'"
}

ssh {
	prompt "Import Dump to '${DestSchema}'"
	cmd "su - oracle -c 'impdp ${target.username}/${target.password} remap_schema=${SourceSchema}:${DestSchema} directory=${target.prop.pumpDbDir} dumpfile=${SourceSchema}.dmp logfile=${DestSchema}.log'"
	force true
}

def osDir = findOsDir()
ssh {
	prompt "Remove Generated Dump File"
	cmd "rm -f ${osDir}/${SourceSchema}.dmp"
}
]]></body>
				</command>

				<command name="copyRemoteSchema">
					<params>
						<param name="SourceSchema" required="true"/>
						<param name="DestSchema" required="true"/>
						<param name="DestServer" type="Service" required="true"/>
						<param name="DoBackUpDest" type="Boolean" defaultValue="true"/>
					</params>

					<body><![CDATA[
if(!checkUser([Username: SourceSchema]))
	$error("Schema '${SourceSchema}' does not exist!")

def srcServer = target
def dbLinkName = "dbl${target.id}_${DestServer.id}_${$now()}"

reTarget(DestServer, {

	db {
		prompt "Create Database Link on Dest: ${dbLinkName}"
		query """
			create database link ${dbLinkName}
			connect to ${srcServer.username} identified by "${srcServer.password}"
			using '
			(DESCRIPTION=
				(ADDRESS=
					(PROTOCOL=TCP)
					(HOST=${srcServer.address})
					(PORT=${srcServer.port})
				)
				(CONNECT_DATA=
					(SID=${srcServer.prop.sid})
				)
			)' """
	}

	dropUser([Username: DestSchema, DoBackup: DoBackUpDest, DoKillSessions: true])

	if(SourceSchema == DestSchema)
		ssh {
			prompt "Import Database from: '${srcServer}'"
			cmd "su - oracle -c 'impdp ${target.username}/${target.password} schemas=${SourceSchema} directory=${target.prop.pumpDbDir} network_link=${dbLinkName} logfile=${DestSchema}.log'"
			force true
		}

	else
		ssh {
			prompt "Import Database from: '${srcServer}'"
			cmd "su - oracle -c 'impdp ${target.username}/${target.password} schemas=${SourceSchema} remap_schema=${SourceSchema}:${DestSchema} directory=${target.prop.pumpDbDir} network_link=${dbLinkName} logfile=${DestSchema}.log'"
			force true
		}

	db {
		prompt "Drop Database Link on Dest: '${target}' - Name=${dbLinkName}"
		query "drop database link ${dbLinkName}"
	}
})
]]></body>
				</command>

				<command name="restoreSchema">
					<params>
						<param name="Schema" required="true"/>
						<param name="DumpFile" required="true"/>
					</params>

					<body>
						<![CDATA[
if(!checkUser([Username: Schema]))
	$error("Schema '${Schema}' does not exist!")

truncateSchema([Schema: Schema])

ssh {
	prompt "Restoring '${Schema}' from '${DumpFile}'"
	cmd "su - oracle -c 'impdp ${target.username}/${target.password} schemas=${Schema} directory=${target.prop.pumpDbDir} dumpfile=${DumpFile}.dmp logfile=${Schema}.log'"
	force true
}
]]></body>
				</command>

				<command name="findOsDir">
					<params/>
					<body><![CDATA[
db {
	prompt 'Find OS-Directory of DB-Directory'
	query "select directory_path from all_directories where directory_name='${target.prop.pumpDbDir}'"
}
]]></body>
				</command>

				<command name="listDump">
					<params/>
					<body>
						<![CDATA[
def osDir = findOsDir()

ssh {
	prompt 'List Dump Files'
	cmd """ find ${osDir} -maxdepth 1 -name "*.dmp" -printf "%TY-%Tm-%Td %TH:%TM|%f\n" | sort -r """
	result {
		it.toTabular("[|]")
		  .prepend("Time|DumpFile\n")
	}
}
]]></body>
				</command>

				<command name="dropUser">
					<params>
						<param name="Username" required="true"/>
						<param name="DoBackup" type="Boolean" defaultValue="true" required="true"/>
						<param name="DoKillSessions" type="Boolean" defaultValue="false" required="true"/>
					</params>

					<body><![CDATA[
if(checkUser([Username: Username])) {
	if(DoKillSessions)
		killUserSession([Username: Username])

	if(DoBackup)
		backupSchema([Schema: Username])

	db {
		prompt "Drop user '${Username}'"
		query "drop user ${Username} cascade"
	}
}
]]></body>
				</command>

				<command name="killUserSession">
					<params>
						<param name="Username" required="true"/>
					</params>

					<body><![CDATA[
db {
	prompt "Kill All Sessions for User: '${Username}'"
	query """
		declare
			v_schema varchar2(20);
		begin
			v_schema := '${Username.toUpperCase()}';
			if v_schema in ('SYS','DBSNMP','SYSMAN', 'SYSTEM') then
				raise_application_error(-20001, 'Session belongs to illegal user. You can not kill ${Username}!');
			end if;

			for i in (select sid, serial# from v\$session where username = v_schema)
			loop
				execute immediate 'alter system kill session '''|| i.sid || ',' || i.serial# || ''' immediate';
			end loop;
		end; """
}
]]></body>
				</command>

			</commands>

		</service>

	</services>
</operation>
