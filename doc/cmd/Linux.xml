<operation>
	<services>
		<service name="Linux" adminPort="22">

			<validations>
				<validation name="LinId" regex="^[.\-_\w\d]+$"/>
				<validation name="LinIP" regex="^[.\-_\w\d:]+$"/>
				<validation name="LinNum" regex="^\d+$"/>
			</validations>

			<commands>

				<command name="changePassword">
					<params>
						<param name="Username" required="true" validRef="LinId"/>
						<param name="NewPassword" required="true"/>
					</params>

					<body><![CDATA[
ssh{
	prompt "Change Password for '${Username}'"
	cmd "passwd ${Username} --stdin"
	stdin NewPassword
}
$userPasswordUpdated(Username, NewPassword)
]]></body>
				</command>

				<command name="fileUpload">
					<params>
						<param name="File" type="File" required="true"/>
					</params>

					<body><![CDATA[
$scpTo($param('File'), '~')
]]></body>
				</command>

				<command name="service">
					<params>
						<param name="Name" required="true" validRef="LinId"/>
						<param name="Action" required="true" stringLiterals="start|stop|restart|status"/>
					</params>

					<body><![CDATA[
ssh {
	prompt "Action for Service '${Name}': ${Action}"
	cmd "service ${Name} ${Action}"
}
]]></body>
				</command>

				<command name="killProcess">
					<params>
						<param name="ProcessName" required="true" validRef="LinId"/>
						<param name="Username" required="true" validRef="LinId"/>
						<param name="Dash9" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
def d9 = Dash9 ? '-9' : ''
def processes = oListProcess([ProcessName: ProcessName, Username: Username])
processes.rows.each {r ->
	ssh {
		prompt "Kill Process: pid=${r.pid}"
		cmd "kill ${d9} ${r.pid}"
		force true
	}
}

return null
]]></body>
				</command>

				<command name="jStack">
					<params>
						<param name="Username" required="true" validRef="LinId"/>
						<param name="PID" validRef="LinNum"/>
					</params>

					<body><![CDATA[
def prc = oListProcess([ProcessName: 'java', Username: Username, PID: $param('PID')])

if(!prc.rows.empty) {
	def pid = prc.rows[0].pid
	ssh {
		prompt "Show Java Stack Trace (found=${prc.rows.size()}): PID=${pid}"
		cmd "su - ${Username} -c 'jstack ${pid}'"
	}
} else {
	$error('No Java Process Found!')
}
]]></body>
				</command>

				<command name="pkg">
					<params>
						<param name="Name" required="true" validRef="LinId"/>
						<param name="Action" required="true"
							   stringLiterals="Search|Info|DepList|CheckInstall|Install|CheckUnInstall|UnInstall"
							   defaultValue="Search"/>
					</params>

					<body><![CDATA[
ssh {
	prompt 'Update Repo Info'
	cmd 'yum makecache'
}

switch(Action) {
	case 'Search':
		ssh {
			prompt "Search for '${Name}'"
			cmd "yum list all | grep ${Name}"
			result {
				it.toTabular('\\s{1,}')
				  .prepend("Package Version Repository\n")
			}
		}
		break

	case 'Info':
		ssh {
			prompt "Info for '${Name}'"
			cmd "yum info ${Name}"
		}
		break

	case 'DepList':
		ssh {
			prompt "List Dependency(ies) for '${Name}'"
			cmd "yum deplist ${Name}"
		}
		break

	case 'CheckInstall':
		ssh {
			prompt "Check Installation for '${Name}'"
			cmd "yum --assumeno install ${Name}"
			force true
		}
		break

	case 'Install':
		ssh {
			prompt "Installing '${Name}'"
			cmd "yum -y -q install ${Name}"
		}
		break

	case 'CheckUnInstall':
		ssh {
			prompt "Check UnInstallation for '${Name}'"
			cmd "yum --assumeno remove ${Name}"
			force true
		}
		break

	case 'UnInstall':
		ssh {
			prompt "UnInstalling '${Name}'"
			cmd "yum -y remove ${Name}"
		}
		break
}
]]></body>
				</command>

				<command name="storageInfo">
					<params>
						<param name="LocalOnly" type="Boolean" required="true" defaultValue="true"/>
						<param name="ShowTotal" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
/*
	P: use the POSIX output format
	T: print file system type
	h: print size in human readable format
	l: limit listing to local file systems
	--total: produce a grant total
*/
def opt = "-PTh"
if(LocalOnly)
	opt += "l"
if(ShowTotal)
	opt += " --total"

ssh {
	prompt 'File System Disk Space Usage'
	cmd "df ${opt} | column -t"
	result {
		it.toTabular('[ ]{2,}')
	}
}
]]></body>
				</command>

				<!-- ============= OS QUERY ============= -->

				<command name="oQuery">
					<params>
						<param name="Prompt" defaultValue="Querying"/>
						<param name="Sql" required="true"/>
						<param name="LimStart" required="true" defaultValue="0"/>
						<param name="LimCount" required="true" defaultValue="150"/>
					</params>

					<body><![CDATA[
def sql_lim = "${Sql} limit ${LimStart}, ${LimCount}"
def sql_cnt = "select count(*) from (${Sql})"

def cnt = ssh {
	prompt "Counting: ${Prompt}"
	cmd """ osqueryi "${sql_cnt}" --csv --noheader """

	result {
		it.toInteger()
	}

	error {
		pkg([Name: 'osquery', Action: 'Install'])
		$error("Package 'osquery' installed! ReRun command!")
	}
}

ssh {
	prompt Prompt
	cmd """ osqueryi "${sql_lim}" --csv """
	result {
		it.toTabular("[|]")
		  .setSize(cnt)
		  .build()
	}
}
]]></body>
				</command>

				<command name="oListUser">
					<params>
						<param name="Uid" validRef="LinNum"/>
						<param name="Username" validRef="LinId"/>
						<param name="ShowNormal" type="Boolean" required="true" defaultValue="true"/>
						<param name="LoggedIn" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
def sql = """
select
	us.uid,
	us.username,
	us.description,
	us.directory,
	us.shell,
	liu.type login_type,
	liu.tty  login_tty,
	liu.host login_remote_host,
	datetime(liu.time, 'unixepoch', 'localtime') login_time,
	liu.pid  login_pid
from
	users us
	left join logged_in_users liu on us.username=liu.user
where 1=1"""

if($param("Uid"))
	sql += " and us.uid = '${Uid}'"

if($param("Username"))
	sql += " and us.username = '${Username}'"

if(ShowNormal)
	sql += " and us.shell='/bin/bash'"

if(LoggedIn)
	sql += " and liu.type is not null"

oQuery([Prompt: 'List of Users', Sql: sql])
]]></body>
				</command>

				<command name="oListLoginHistory">
					<params>
						<param name="Username" validRef="LinId"/>
						<param name="Type"
							   stringLiterals="BOOT_TIME|INIT_PROCESS|LOGIN_PROCESS|USER_PROCESS|DEAD_PROCESS"
							   defaultValue="USER_PROCESS"/>
					</params>

					<body><![CDATA[
def typeMap = ['BOOT_TIME':2, 'INIT_PROCESS':5, 'LOGIN_PROCESS':6, 'USER_PROCESS':7, 'DEAD_PROCESS':8]

def sql = """
select
	username,
	tty,
	pid,
	case type
		when 2 then 'BOOT_TIME'
		when 5 then 'INIT_PROCESS'
		when 6 then 'LOGIN_PROCESS'
		when 7 then 'USER_PROCESS'
		when 8 then 'DEAD_PROCESS'
		else type
	end type,
	datetime(time, 'unixepoch', 'localtime') time,
	host
from
	last
where 1=1"""

if($param('Username'))
	sql += " and username = '${Username}'"

if($param('Type'))
	sql += " and type = ${typeMap[Type]}"

sql += " order by time desc"

oQuery([Prompt: 'List Login History', Sql: sql])
]]></body>
				</command>

				<command name="oListProcess">
					<params>
						<param name="ProcessName" validRef="LinId"/>
						<param name="Username" validRef="LinId"/>
						<param name="ShowProcessPath" type="Boolean" required="true" defaultValue="false"/>
						<param name="ShowCmdline" type="Boolean" required="true" defaultValue="false"/>
						<param name="SortBy" defaultValue="resident_size"
							   stringLiterals="process_name|username|resident_size|threads"/>
						<param name="SortMod" defaultValue="desc" stringLiterals="desc|asc"/>
					</params>

					<body><![CDATA[
def sql = "select pr.pid, pr.name process_name, us.username, pr.state, pr.resident_size, pr.total_size, pr.threads"

if(ShowProcessPath)
	sql += ", pr.path process_path"

if(ShowCmdline)
	sql += ", pr.cmdline"


sql += " from processes pr join users us using(uid) where 1=1"


if($param("PID"))
	sql += " and pr.pid = '${PID}'"

if($param("ProcessName"))
	sql += " and pr.name = '${ProcessName}'"

if($param("Username"))
	sql += " and us.username = '${Username}'"

if($param("SortBy")) {
	def mod = $param("SortMod") ? SortMod : 'desc'
	sql = "select * from (${sql}) order by ${SortBy} ${mod}"
}

oQuery([Prompt: 'List of Processes', Sql: sql])]]></body>
				</command>

				<command name="oListOpenSocket">
					<params>
						<param name="Pid" validRef="LinNum"/>
						<param name="ProcessName" validRef="LinId"/>
						<param name="Protocol" validRef="LinId"/>
						<param name="RemoteAddress" validRef="LinIP"/>
						<param name="RemotePort" validRef="LinNum"/>
						<param name="Username" validRef="LinId"/>
						<param name="ShowProcessPath" type="Boolean" required="true" defaultValue="false"/>
						<param name="ShowCmdline" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
def sql = "select pr.pid, pr.name process_name, os.protocol, os.local_address, os.local_port, os.remote_address, os.remote_port, us.username"

if(ShowProcessPath)
	sql += ", pr.path process_path"

if(ShowCmdline)
	sql += ", pr.cmdline"

sql += " from process_open_sockets os join processes pr using(pid) join users us using(uid) where 1=1"

if($param("Pid"))
	sql += " and pr.pid = '${Pid}'"

if($param("Protocol"))
	sql += " and os.protocol = '${Protocol}'"

if($param("RemoteAddress"))
	sql += " and os.remote_address = '${RemoteAddress}'"

if($param("RemotePort"))
	sql += " and os.remote_port = '${RemotePort}'"

if($param("ProcessName"))
	sql += " and pr.name = '${ProcessName}'"

if($param("Username"))
	sql += " and us.username = '${Username}'"

oQuery([Prompt: 'List of Opened Sockets', Sql: sql])
]]></body>
				</command>

				<command name="oListOpenFile">
					<params>
						<param name="Pid" validRef="LinNum"/>
						<param name="ProcessName" validRef="LinId"/>
						<param name="Username" validRef="LinId"/>
						<param name="ShowProcessPath" type="Boolean" required="true" defaultValue="false"/>
						<param name="ShowCmdline" type="Boolean" required="true" defaultValue="false"/>
					</params>

					<body><![CDATA[
def sql = "select pr.pid, pr.name process_name, of.path file_path, us.username"

if(ShowProcessPath)
	sql += ", pr.path process_path"

if(ShowCmdline)
	sql += ", pr.cmdline"

sql += " from process_open_files of join processes pr using(pid) join users us using(uid) where 1=1"

if($param("Pid"))
	sql += " and pr.pid = '${Pid}'"

if($param("ProcessName"))
	sql += " and pr.name = '${ProcessName}'"

if($param("Username"))
	sql += " and us.username = '${Username}'"

oQuery([Prompt: 'List of Opened Files', Sql: sql])
]]></body>
				</command>

				<command name="oListInterface">
					<params/>

					<body><![CDATA[
def sql = "select * from interface_addresses"
oQuery([Prompt: 'List Network Interface(s)', Sql: sql])
]]></body>
				</command>

				<command name="oOsInfo">
					<params/>

					<body><![CDATA[
def sql = "select * from os_version"
oQuery([Prompt: 'OS Info', Sql: sql])
]]></body>
				</command>

				<command name="oSystemInfo">
					<params/>

					<body><![CDATA[
def sql = "select hostname,cpu_physical_cores,cpu_logical_cores,physical_memory,computer_name from system_info"
oQuery([Prompt: 'System Info', Sql: sql])
]]></body>
				</command>

				<command name="oTime">
					<params/>

					<body><![CDATA[
def sql = "select * from time"
oQuery([Prompt: 'System Time', Sql: sql])
]]></body>
				</command>

			</commands>
		</service>
	</services>
</operation>