<operation>
	<services>
		<service name="ESXi" adminPort="22">

			<commands>

				<command name="changePassword" confirm="true">
					<params>
						<param name="Username" required="true"/>
						<param name="NewPassword" required="true"/>
					</params>

					<body><![CDATA[
ssh{
	prompt "Change password for '${Username}'"
	cmd "passwd ${Username} --stdin"
	stdin NewPassword
}
$userPasswordUpdated(Username, NewPassword)
]]></body>
				</command>

				<command name="fileUpload">
					<params>
						<param name="File" type="File" required="true"/>
					</params>

					<body><![CDATA[
$scpTo($param('File'), '~')
]]></body>
				</command>

				<!-- Specific Commands -->

				<command name="vList" viewMode="List">
					<params>
						<param name="Vmid" type="Guest"/>
						<param name="Name"/>
						<param name="ShowPowerStat" type="Boolean" defaultValue="false" required="true"/>
						<param name="ShowIP" type="Boolean" defaultValue="false" required="true"/>
						<param name="IpPrefix"/>
						<param name="ShowVmx" type="Boolean" defaultValue="false" required="true"/>
						<param name="CheckDef" type="Boolean" defaultValue="false" required="true"/>
						<param name="UpdateMode" stringLiterals="None|All|OnlyNew" defaultValue="None" required="true"/>
						<param name="MultiMatchAlg" stringLiterals="Vmid|Name|Address"/>
					</params>

					<body><![CDATA[
def filter = $input('Vmid', 'Name')
def UpdateServer = UpdateMode != 'None'

def tab = ssh {
	prompt 'List of VMs'
	cmd 'vim-cmd vmsvc/getallvms'
	result {
		it.toTabular('\\s{3,}')
		  .build(filter)
	}
}

def listOfServers = []

tab.rows.each {Map vmMap ->
	$log("vList: Before change ${vmMap}")

	vmMap.DataStore = vmMap.File.find('\\[(.+?)\\]', 1)
	vmMap.File = vmMap.File.replaceAll('\\[.+?\\] ', '')

	if(ShowIP || UpdateServer)
		vmMap.IpAddress = vGetIP([Vmid : vmMap.Vmid, IpPrefix: $param("IpPrefix")])

	if(CheckDef) {
		def oServers = $checkVMServer($param('MultiMatchAlg'), vmMap.Name, vmMap.Vmid, vmMap.IpAddress)
		vmMap.Defined = oServers.size()

		// #TIP
		vmMap.Match = oServers
		                .inject([]){list, oSr -> list << "( ${oSr.vmId} ) ( ${oSr.name} ) ( ${oSr.address} )" }
		                .join(',')
	}

	if(ShowPowerStat)
		vmMap.PowerStat = vPowerStat([Vmid : vmMap.Vmid])

	if(ShowVmx) {
		def vmVMX = ssh {
			prompt "Get VMX: ${vmMap.Vmid}"
			cmd """ cat "/vmfs/volumes/${vmMap.DataStore}/${vmMap.File}" """
			result {
				it.toMap()
			}
		}

		def vmdkMap = [:]
		vmVMX.each { String k, String v ->
			if (v.endsWith('.vmdk')) {
				if(v.startsWith('/')) {
					vmdkMap[k] = v
				} else {
					vmdkMap[k] = "/vmfs/volumes/${vmMap.DataStore}/${vmMap.Name}/${v}"
				}
			}
		}
		vmMap.VMDK = vmdkMap
		vmMap.INFO = vmVMX
	}

	$log("vList: After change ${vmMap}")

	if (UpdateServer) {
		def os = null
		def guestOS = vmMap["Guest OS"].toLowerCase()
		if(guestOS.contains("linux"))
			os = "Linux"
		else if(guestOS.contains("windows"))
			os = "Windows"
		listOfServers.add([name: vmMap.Name, address: vmMap.IpAddress, vmId: vmMap.Vmid, os:os])
	}
}

if (UpdateServer) {
	if ($param('MultiMatchAlg')) {
		$updateVMServers(MultiMatchAlg, listOfServers, UpdateMode == 'OnlyNew')
	} else {
		$error("'MultiMatchAlg' is required for 'Update'")
	}
}

return tab
]]></body>
				</command>

				<command name="vPowerStat">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
ssh {
	prompt "Check power status: '${Vmid}'"
	cmd "vim-cmd vmsvc/power.getstate ${Vmid}"
	result {
		it.stdout.contains('Powered on')
	}
}
]]></body>
				</command>

				<command name="vPowerOn" confirm="true">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
if(!vPowerStat([Vmid:Vmid])) {
	ssh {
		prompt "Power On: '${Vmid}'"
		cmd "vim-cmd vmsvc/power.on ${Vmid}"
	}
} else {
	$error("Already On!")
}
]]></body>
				</command>

				<command name="vPowerOff" confirm="true">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
if(vPowerStat([Vmid:Vmid])) {
	ssh {
		prompt "Power Off: '${Vmid}'"
		cmd "vim-cmd vmsvc/power.off ${Vmid}"
	}
} else {
	$error("Already Off!")
}
]]></body>
				</command>

				<command name="vReboot" confirm="true">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
if(vPowerStat([Vmid:Vmid])) {
	ssh {
		prompt "Reboot: '${Vmid}'"
		cmd "vim-cmd vmsvc/power.reboot ${Vmid}"
	}
} else {
	$error('Already off')
}
]]></body>
				</command>

				<command name="vUnregister" confirm="true">
					<params>
						<param name="Vmid" required="true"/>
					</params>

					<body><![CDATA[
if(!vPowerStat([Vmid:Vmid])) {
	ssh {
		prompt "Unregister VM: '${Vmid}'"
		cmd "vim-cmd vmsvc/unregister ${Vmid}"
	}
} else {
	$error('Power off before unregister')
}
]]></body>
				</command>

				<command name="vDelete" confirm="true">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
if(!vPowerStat([Vmid:Vmid])) {
	ssh {
		prompt "Delete: '${Vmid}'"
		cmd "vim-cmd vmsvc/destroy ${Vmid}"
	}
} else {
	$error('Power off before delete')
}
]]></body>
				</command>

				<command name="vGetIP">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
						<param name="IpPrefix"/>
					</params>

					<body><![CDATA[
def ipPre = $param("IpPrefix") ? $param("IpPrefix") : ""

ssh {
	prompt "Get IP: '${Vmid}'"
	cmd """ vim-cmd vmsvc/get.guest ${Vmid} | grep -m 1 "ipAddress = \\"${ipPre}" """
	force true
	result {
		it.stdout
		  .find('\"(.+?)\"', 1)
	}
}
]]></body>
				</command>

				<command name="vClone" confirm="true">
					<params>
						<param name="SrcVmid" type="Guest" required="true"/>
						<param name="DestName" required="true"/>
					</params>

					<body><![CDATA[
def srcVm = vList([Vmid: SrcVmid, ShowPowerStat: true, ShowVmx: true]).object

if (srcVm.PowerStat)
	$error("Turn off '${srcVm.Name}' before cloning!")

if(vList([Name: DestName]).size == 1)
	$error("New Server Name Exists: ${DestName}")

def newVmxDir = "/vmfs/volumes/${srcVm.DataStore}/${DestName}"

def newVmx = vDuplicateVmx([Vm: srcVm, DestName: DestName, New: true])

$warn("Create vmx for '${DestName}' in ${newVmxDir}\n${newVmx}")

ssh {
	prompt "Create VMX for new VM"
	cmd """
mkdir -p "${newVmxDir}"
cat > "${newVmxDir}/${DestName}.vmx" << _EOF_
${newVmx}
_EOF_
	"""
}

def newVmdkMap = [:]
srcVm.VMDK.each { String k, String v ->
	def newVmdk = v.replaceAll(srcVm.Name, DestName)
	newVmdkMap[k] = newVmdk
}

srcVm.VMDK.each {k, v ->
	ssh {
		prompt "Copy VMDK: '${k}', '${v}' >> '${newVmdkMap[k]}'"
		cmd """
			mkdir -p \$(dirname "${newVmdkMap[k]}")
			vmkfstools -i "${v}" "${newVmdkMap[k]}"
		"""
	}
}

ssh {
	prompt "Register VM: ${DestVM}"
	cmd """
		vim-cmd solo/registervm "${newVmxDir}/${DestVM}.vmx"
	"""
}

vList([Name: DestName, UpdateMode: 'OnlyNew', MultiMatchAlg: 'Name'])

]]></body>
				</command>

				<!-- Hidden -->

				<command name="vDuplicateVmx" viewMode="Hidden">
					<params>
						<param name="Vm"/>
						<param name="DestName"/>
						<param name="MemSize" required="true" defaultValue="4096"/>
						<param name="New" type="Boolean"/>
					</params>

					<body><![CDATA[
def newVmxMap = Vm.INFO.clone()

if(newVmxMap['vcpu.hotadd'])
	$error("Source VM 'CPU HotAdd' Not Supported!")

if(newVmxMap['mem.hotadd'])
	$error("Source VM 'Mem HotAdd' Not Supported!")

newVmxMap['displayName'] = DestName
newVmxMap['memSize'] = MemSize
newVmxMap['nvram'] = "${DestName}.nvram"

if (newVmxMap['extendedConfigFile']) {
	newVmxMap['extendedConfigFile'] = "${DestName}.vmxf"
}

newVmxMap.remove('migrate.hostlog')
newVmxMap.remove('sched.swap.derivedName')

if (New) {
	newVmxMap.remove('uuid.bios')
	newVmxMap.remove('uuid.location')
	newVmxMap.remove('vc.uuid')
	newVmxMap.remove('vmci0.id')
}

Vm.INFO.each { String k, String v ->
	if (v.endsWith('.vmdk')) {
		newVmxMap[k] = v.replaceAll(vm.Name, DestName)
	}

	if (New) {
		if (k.matches('ethernet\\d+\\.generatedAddress.*')) {
			newVmxMap.remove(k)
		}
	}
}

return newVmxMap.exportStr()
]]></body>
				</command>

			</commands>

		</service>
	</services>
</operation>