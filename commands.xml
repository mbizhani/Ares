<operation>
	<services>
		<service name="OracleDB"
				 connectionPattern="jdbc:oracle:thin:@${target.address}:${target.port}:${target.prop.sid}"
				 adminPort="1521">

			<properties>
				<property name="driver" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="sid" required="true"/>
				<property name="pumpDbDir" required="true"/>
				<property name="pumpOsDir" required="true"/>
			</properties>

			<commands>
				<command name="showUsers">
					<params/>
					<body><![CDATA[
$cmd.sql("show all users", "select user_id, username, account_status, lock_date, default_tablespace, created from dba_users")
]]></body>
				</command>

				<command name="changePassword">
					<params>
						<param name="username" required="true"/>
						<param name="newPassword" required="true"/>
					</params>

					<body><![CDATA[
$cmd.sql("change password for '${username}'", "alter user ${username} identified by \"${newPassword}\" account unlock")
$cmd.userPasswordUpdated(username, newPassword)
]]></body>
				</command>

				<command name="checkDBUser">
					<params>
						<param name="schema" type="string" required="true"/>
					</params>
					<body>
						<![CDATA[
$cmd.sql("check user '${schema}'", "select count(1) from all_users where username=upper('${schema}')") > 0
]]></body>
				</command>

				<command name="truncateDBUser">
					<params>
						<param name="schema" type="string" required="true"/>
					</params>
					<body>
						<![CDATA[
$cmd.sql("truncate all sequences, tables, and synonyms for '${schema}'",
"""
DECLARE
	scname varchar2(20);
BEGIN
	scname := '${schema.toUpperCase()}';

	--Bye Sequences!
	for i in (select us.sequence_name from all_sequences us where us.sequence_owner = scname) loop
		execute immediate 'drop sequence '||scname||'.'|| i.sequence_name;
	end loop;

	--Bye Tables!
	for i in (select ut.table_name from all_tables ut where ut.owner = scname) loop
		execute immediate 'drop table '||scname||'.'|| i.table_name ||' cascade constraints purge';
	end loop;

	--Bye Synonyms!
	for i in (select us.synonym_name from all_synonyms us where us.owner = scname) loop
		execute immediate 'drop synonym '||scname||'.'|| i.synonym_name;
	end loop;
end;
""")
]]></body>
				</command>

				<command name="copySchema">
					<params>
						<param name="sourceSchema" type="string" required="true"/>
						<param name="destSchema" type="string" required="true"/>
					</params>
					<body>
						<![CDATA[
if(!$cmd.exec("checkDBUser", [schema:sourceSchema])) {
	$cmd.error("Invalid user '${sourceSchema}' to create dump file")
}

$cmd.exec("backupSchema", [schema:destSchema])

$cmd.exec("truncateDBUser", [schema:destSchema])

$cmd.ssh("export dump from '${sourceSchema}'", "su - oracle -c 'expdp ${target.username}/${target.password} schemas=${sourceSchema} directory=${target.prop.pumpDbDir} dumpfile=${sourceSchema}.dmp logfile=${sourceSchema}.log'")

$cmd.ssh("import dump to '${destSchema}'", "su - oracle -c 'impdp ${target.username}/${target.password} remap_schema=${sourceSchema}:${destSchema} directory=${target.prop.pumpDbDir} dumpfile=${sourceSchema}.dmp logfile=${destSchema}.log'", true)

$cmd.ssh("remove generated dump file", "rm -f ${target.prop.pumpOsDir}/${sourceSchema}.dmp")
]]></body>
				</command>

				<command name="backupSchema">
					<params>
						<param name="schema" type="string" required="true"/>
					</params>
					<body>
						<![CDATA[
if(!$cmd.exec('checkDBUser', [schema:schema])) {
	$cmd.error("Invalid user '${schema}' to create dump file")
}

def file = "${schema}_bkup_${$util.now()}.dmp"
$cmd.ssh("create backup from '${schema}' as '${file}'", "su - oracle -c 'expdp ${target.username}/${target.password} schemas=${schema} directory=${target.prop.pumpDbDir} dumpfile=${file} logfile=${schema}.log'")
]]></body>
				</command>
			</commands>
		</service>

		<service name="Linux" adminPort="22">
			<commands>
				<command name="changePassword">
					<params>
						<param name="username" required="true"/>
						<param name="newPassword" required="true"/>
					</params>

					<body><![CDATA[
$cmd.ssh("change password for '${username}'", "passwd ${username} --stdin", newPassword)
$cmd.userPasswordUpdated(username, newPassword)
]]></body>
				</command>

				<command name="ll">
					<params>
						<param name="dir" required="true"/>
					</params>

					<body><![CDATA[
$cmd.ssh("echo", "echo dir=${dir}")
$cmd.ssh("ls", "ls -l ${dir}")
]]></body>
				</command>

				<command name="netstat">
					<params/>

					<body><![CDATA[
$cmd.ssh("netstat", "netstat -antp")
	.toTabular()
	.setIgnoreStartingLines(1)
	.setPossibleColumns("Proto", "Recv-Q", "Send-Q", "Local Address", "Foreign Address", "State", "PID/Program name")
]]></body>
				</command>
			</commands>
		</service>

		<service name="ESXi" adminPort="22">

			<commands>
				<command name="listVM">
					<params>
						<param name="Vmid" type="Guest"/>
						<param name="Name"/>
						<param name="ShowAdvanced" type="boolean" defaultValue="false" required="true"/>
						<param name="UpdateServer" type="boolean" defaultValue="false" required="true"/>
					</params>

					<body><![CDATA[
def filter = [:]
if (binding.variables['Vmid']) {
	filter['Vmid'] = Vmid
}
if (binding.variables['Name']) {
	filter['Name'] = Name
}

def tab = $cmd.ssh('List of VMs', 'vim-cmd vmsvc/getallvms')
	.toTabular('\\s{3,}')
	.build(filter)

def listOfServers = []

tab.rows.each {
	$util.log("listVM: Before change ${it}")

	it['DataStore'] = it.File.find('\\[(.+?)\\]', 1)
	it.File = it.File.replaceAll('\\[.+?\\] ', '')
	if(ShowAdvanced) {
		it['PowerStat'] = $cmd.exec('powerStat', [Vmid : it.Vmid])
		it['IpAddress'] = $cmd.exec('getIP', [Vmid : it.Vmid])

		def vmVMX = $cmd.ssh("Get VMX: ${it.Vmid}", """cat "/vmfs/volumes/${it.DataStore}/${it.File}" """).toMap()
		it['INFO'] = vmVMX

		def vmdkMap = [:]
		vmVMX.each { String k, String v ->
			if (v.endsWith('.vmdk')) {
				if(v.startsWith('/')) {
					vmdkMap[k] = v
				} else {
					vmdkMap[k] = "/vmfs/volumes/${it.DataStore}/${it.Name}/${v}"
				}
			}
		}
		it['VMDK'] = vmdkMap
	} else if(UpdateServer) {
		it['IpAddress'] = $cmd.exec('getIP', [Vmid : it.Vmid])
	}

	$util.log("listVM: After change ${it}")

	if (UpdateServer) {
		listOfServers.add([name: it.Name, address: it.IpAddress, vmId: it.Vmid])
	}
}

if (UpdateServer) {
	$cmd.checkVMServers(target.serverId, listOfServers)
}

return tab
]]></body>
				</command>

				<command name="powerStat">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
$cmd.ssh("Check power status: '${Vmid}'", "vim-cmd vmsvc/power.getstate ${Vmid}").stdout.contains('Powered on')
]]></body>
				</command>

				<command name="powerOn">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
if(!$cmd.exec('powerStat')) {
	$cmd.ssh("Power On: '${Vmid}'", "vim-cmd vmsvc/power.on ${Vmid}")
} else {
	$cmd.error("Already on")
}
]]></body>
				</command>

				<command name="powerOff">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
if($cmd.exec('powerStat')) {
	$cmd.ssh("Power Off: '${Vmid}'", "vim-cmd vmsvc/power.off ${Vmid}")
} else {
	$cmd.error("Already off")
}
]]></body>
				</command>

				<command name="reboot">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
if($cmd.exec('powerStat')) {
	$cmd.ssh("Reboot: '${Vmid}'", "vim-cmd vmsvc/power.reboot ${Vmid}")
} else {
	$cmd.error('Already off')
}
]]></body>
				</command>

				<command name="deleteVM">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
if(!$cmd.exec('powerStat')) {
	$cmd.ssh("Delete: '${Vmid}'", "vim-cmd vmsvc/destroy ${Vmid}")
} else {
	$cmd.error('Power off before delete')
}
]]></body>
				</command>

				<command name="getIP">
					<params>
						<param name="Vmid" type="Guest" required="true"/>
					</params>

					<body><![CDATA[
$cmd.ssh("Get IP: '${Vmid}'", """ vim-cmd vmsvc/get.guest ${Vmid} | grep -m 1 "ipAddress = \\"" """, true)
.stdout
.find('\"(.+?)\"', 1)
]]></body>
				</command>

				<command name="cloneVM">
					<params>
						<param name="srcVmid" type="Guest" required="true"/>
						<param name="destVM" type="Server" required="true"/>
					</params>

					<body><![CDATA[
def srcVm = $cmd.exec('listVM', [Vmid: srcVmid, ShowAdvanced: true]).object

if (destVM.hypervisorId == target.serverId) { //same hypervisor

	if (destVM['vmId']) { // VM already existed
		def dstVm = $cmd.exec('listVM', [Vmid: destVM.vmId, ShowAdvanced: true]).object

		if (srcVm.VMDK.size() == dstVm.VMDK.size()) {
			srcVm.VMDK.each {k, v ->
				if (!dstVm.VMDK[k]) {
					$cmd.error("Invalid dest vm ${destVM}: '${k}' not found for vmdk")
				}
			}

			srcVm.VMDK.each {k, v ->
				$cmd.ssh("Copy VMDK: ${k}", """vmkfstools -U "${dstVm.VMDK[k]}"; vmkfstools -i "${v}" "${dstVm.VMDK[k]}" """)
			}
		} else {
			$cmd.error('Invalid number of vmdks')
		}
	} else { // new dest VM
		def newVmxDir = "/vmfs/volumes/${srcVm.DataStore}/${destVM.name}"

		def newVmx =
""".encoding = "UTF-8"
config.version = "8"
virtualHW.version = "10"
memSize = "${srcVm.INFO.memSize}"
numvcpus = "${srcVm.INFO['numvcpus'] ? srcVm.INFO.numvcpus : 1}"
cpuid.coresPerSocket = "${srcVm.INFO['cpuid.coresPerSocket'] ? srcVm.INFO.cpuid.coresPerSocket : 1}"
displayName = "${destVM.name}"
guestOS = "${srcVm.INFO.guestOS}"
ide1:0.startConnected = "FALSE"
ide1:0.deviceType = "cdrom-raw"
ide1:0.clientDevice = "TRUE"
ide1:0.fileName = "emptyBackingString"
ide1:0.present = "TRUE"
floppy0.present = "FALSE"
ethernet0.virtualDev = "e1000"
ethernet0.networkName = "VM Network"
ethernet0.addressType = "generated"
ethernet0.uptCompatibility = "TRUE"
ethernet0.present = "TRUE"
scsi0.present = "TRUE"
scsi0.virtualDev = "${srcVm.INFO['scsi0.virtualDev']}" """

		def newVmdkMap = [:]
		srcVm.VMDK.each {k, v ->
			def newVmdk = v.replaceAll(srcVm.Name, destVM.name)
			newVmdkMap[k] = newVmdk
			if (newVmdk.startsWith(newVmxDir)) {
				newVmdk = newVmdk.substring(newVmxDir.length() + 1)
			}

			newVmx += "\n${k.replaceAll('fileName','deviceType')} = \"scsi-hardDisk\""
			newVmx += "\n${k} = \"${newVmdk}\""
			newVmx += "\n${k.replaceAll('fileName','present')} = \"TRUE\""
		}

		$util.log("Create vmx for '${destVM.name}' in ${newVmxDir}\n${newVmx}")

		$cmd.ssh("Create VMX for new VM",
"""
mkdir -p "${newVmxDir}"

cat > "${newVmxDir}/${destVM.name}.vmx" << "EOF2"
${newVmx}
EOF2
""")
		srcVm.VMDK.each {k, v ->
			def vmdkDir = $util.substring(newVmdkMap[k], '/', 0)
			$cmd.ssh("Copy VMDK: ${k}", """mkdir -p \"${vmdkDir}\"; vmkfstools -i "${v}" "${newVmdkMap[k]}" """)
		}

		$cmd.ssh("Register VM: ${destVM.name}", """vim-cmd solo/registervm "${newVmxDir}/${destVM.name}.vmx" """)

		def newVmId = $cmd.exec('listVM', [Name: destVM.name]).object.Vmid
		$cmd.updateServer(destVM.id, newVmId)
	}
} else { //different hypervisor, scp required
}
]]></body>
				</command>

			</commands>
		</service>

	</services>
</operation>