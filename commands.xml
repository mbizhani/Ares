<operation>
	<services>
		<service name="OracleDB"
				 connectionPattern="jdbc:oracle:thin:@${target.address}:${target.port}:${target.prop.sid}"
				 adminPort="1521">

			<properties>
				<property name="driver" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="sid" required="true"/>
				<property name="pumpDbDir" required="true"/>
				<property name="pumpOsDir" required="true"/>
			</properties>

			<commands>
				<command name="showUsers">
					<params/>
					<body><![CDATA[
$cmd.sql("show all users", "select user_id, username, account_status, lock_date, default_tablespace, created from dba_users")
]]></body>
				</command>

				<command name="changePassword">
					<params>
						<param name="username" required="true"/>
						<param name="newPassword" required="true"/>
					</params>

					<body><![CDATA[
$cmd.sql("change password for '${username}'", "alter user ${username} identified by \"${newPassword}\" account unlock")
$cmd.userPasswordUpdated(username, newPassword)
]]></body>
				</command>

				<command name="checkDBUser">
					<params>
						<param name="schema" type="string" required="true"/>
					</params>
					<body>
						<![CDATA[
$cmd.sql("check user '${schema}'", "select count(1) from all_users where username=upper('${schema}')") > 0
]]></body>
				</command>

				<command name="truncateDBUser">
					<params>
						<param name="schema" type="string" required="true"/>
					</params>
					<body>
						<![CDATA[
$cmd.sql("truncate all sequences, tables, and synonyms for '${schema}'",
"""
DECLARE
	scname varchar2(20);
BEGIN
	scname := '${schema.toUpperCase()}';

	--Bye Sequences!
	for i in (select us.sequence_name from all_sequences us where us.sequence_owner = scname) loop
		execute immediate 'drop sequence '||scname||'.'|| i.sequence_name;
	end loop;

	--Bye Tables!
	for i in (select ut.table_name from all_tables ut where ut.owner = scname) loop
		execute immediate 'drop table '||scname||'.'|| i.table_name ||' cascade constraints purge';
	end loop;

	--Bye Synonyms!
	for i in (select us.synonym_name from all_synonyms us where us.owner = scname) loop
		execute immediate 'drop synonym '||scname||'.'|| i.synonym_name;
	end loop;
end;
""")
]]></body>
				</command>

				<command name="copySchema">
					<params>
						<param name="sourceSchema" type="string" required="true"/>
						<param name="destSchema" type="string" required="true"/>
					</params>
					<body>
						<![CDATA[
if(!$cmd.exec("checkDBUser", [schema:sourceSchema])) {
	$cmd.error("Invalid user '${sourceSchema}' to create dump file")
}

$cmd.exec("backupSchema", [schema:destSchema])

$cmd.exec("truncateDBUser", [schema:destSchema])

$cmd.ssh("export dump from '${sourceSchema}'", "su - oracle -c 'expdp ${target.username}/${target.password} schemas=${sourceSchema} directory=${target.prop.pumpDbDir} dumpfile=${sourceSchema}.dmp logfile=${sourceSchema}.log'")

$cmd.ssh("import dump to '${destSchema}'", "su - oracle -c 'impdp ${target.username}/${target.password} remap_schema=${sourceSchema}:${destSchema} directory=${target.prop.pumpDbDir} dumpfile=${sourceSchema}.dmp logfile=${destSchema}.log'", true)

$cmd.ssh("remove generated dump file", "rm -f ${target.prop.pumpOsDir}/${sourceSchema}.dmp")
]]></body>
				</command>

				<command name="backupSchema">
					<params>
						<param name="schema" type="string" required="true"/>
					</params>
					<body>
						<![CDATA[
if(!$cmd.exec("checkDBUser", [schema:schema])) {
	$cmd.error("Invalid user '${schema}' to create dump file")
}

def file = "${schema}_bkup_${$cmd.now()}.dmp"
$cmd.ssh("create backup from '${schema}' as '${file}'", "su - oracle -c 'expdp ${target.username}/${target.password} schemas=${schema} directory=${target.prop.pumpDbDir} dumpfile=${file} logfile=${schema}.log'")
]]></body>
				</command>
			</commands>
		</service>

		<service name="Linux" adminPort="22">
			<commands>
				<command name="changePassword">
					<params>
						<param name="username" required="true"/>
						<param name="newPassword" required="true"/>
					</params>

					<body><![CDATA[
$cmd.ssh("change password for '${username}'", "passwd ${username} --stdin", newPassword)
$cmd.userPasswordUpdated(username, newPassword)
]]></body>
				</command>

				<command name="ll">
					<params>
						<param name="dir" required="true"/>
					</params>

					<body><![CDATA[
$cmd.ssh("echo", "echo dir=${dir}")
$cmd.ssh("ls", "ls -l ${dir}")
]]></body>
				</command>

				<command name="netstat">
					<params/>

					<body><![CDATA[
$cmd.ssh("netstat", "netstat -antp")
	.toTabular()
	.setIgnoreStartingLines(1)
	.setPossibleColumns("Proto", "Recv-Q", "Send-Q", "Local Address", "Foreign Address", "State", "PID/Program name")
]]></body>
				</command>
			</commands>
		</service>

	</services>
</operation>