package org.devocative.ares.test;

import org.devocative.ares.cmd.ConsoleResultProcessing;
import org.junit.Assert;
import org.junit.Test;

import java.nio.file.Files;
import java.nio.file.Paths;

public class TestConsoleResultProcessing {
	@Test
	public void testESXi() throws Exception {
		// the list generated by "vim-cmd vmsvc/getallvms" command
		byte[] bytes = Files.readAllBytes(Paths.get(getClass().getResource("/esxiListVM.txt").toURI()));
		String text = new String(bytes);

		ConsoleResultProcessing crp = new ConsoleResultProcessing(text);
		crp.setSplitBy("\\s{3,}");
		crp.build();

		Assert.assertEquals("[Vmid, Name, File, Guest OS, Version, Annotation]", crp.getColumns().toString());
		Assert.assertEquals(35, crp.getRows().size());
	}

	@Test
	public void testOSQ() throws Exception {
		byte[] bytes = Files.readAllBytes(Paths.get(getClass().getResource("/osqCSV.txt").toURI()));
		String text = new String(bytes);

		ConsoleResultProcessing crp = new ConsoleResultProcessing(text);
		crp.setSplitBy("[|]");
		crp.build();

//		Assert.assertEquals("[Vmid, Name, File, Guest OS, Version, Annotation]", crp.getColumns().toString());
//		Assert.assertEquals(35, crp.getRows().size());
	}

	@Test
	public void testLinPS() throws Exception {
		byte[] bytes = Files.readAllBytes(Paths.get(getClass().getResource("/ps.txt").toURI()));
		String text = new String(bytes);

		ConsoleResultProcessing crp = new ConsoleResultProcessing(text);
		crp.setPossibleColumns("PID", "TTY", "STAT", "COMMAND", "ALAKI", "TIME");
		crp.build();

		Assert.assertEquals("[PID, TTY, STAT, TIME, COMMAND]",
			crp.getColumns().toString());
		Assert.assertEquals(131, crp.getRows().size());
	}

	@Test
	public void testLinNetstat() throws Exception {
		byte[] bytes = Files.readAllBytes(Paths.get(getClass().getResource("/netstat.txt").toURI()));
		String text = new String(bytes);

		ConsoleResultProcessing crp = new ConsoleResultProcessing(text);
		crp
			.setIgnoreStartingLines(1)
			.setPossibleColumns("Proto", "Recv-Q", "Send-Q", "PID/Program name", "Local Address", "ALAKI", "Foreign Address", "State");
		crp.build();

		Assert.assertEquals("[Proto, Recv-Q, Send-Q, Local Address, Foreign Address, State, PID/Program name]",
			crp.getColumns().toString());
		Assert.assertEquals(14, crp.getRows().size());
	}

	@Test
	public void testWinPort() throws Exception {
		byte[] bytes = Files.readAllBytes(Paths.get(getClass().getResource("/winPortForward.txt").toURI()));
		String text = new String(bytes);

		ConsoleResultProcessing crp = new ConsoleResultProcessing(text);
		crp
			.setIgnoreStartingLines(3)
			.setIgnoreLinesAfterHeader(1)
			.setPossibleColumns("Address", "Port", "Local Address", "ALAKI", "Foreign Address", "State");
		crp.build();

		Assert.assertEquals("[Address, Port, Address, Port]",
			crp.getColumns().toString());
		Assert.assertEquals(19, crp.getRows().size());
	}
}
